openapi: 3.0.3
info:
  title: OGC API - Environmental Data Retrieval Standard
  description: OGC API - Environmental Data Retrieval Standard OpenAPI
    Reference Implementation document
  version: 0.5.0
  license:
    name: OGC License
    url: https://www.ogc.org/legal
tags:
  - name: Capabilities
    description: Essential characteristics of the information available from the API.
  - name: Collections
    description: Query Collections available on the server
  - name: Instances
    description: Description of the information available from the instances of a collection
  - name: Position
    description: Query a collection or instance using a Position Query
  - name: Radius
    description: Query a collection or instance using a Radius Query
  - name: Area
    description: Query a collection or instance using a Area Query
  - name: Trajectory
    description: Query a collection or instance using a Trajectory Query
  - name: Cube
    description: Query a collection or instance using a Cube Query
  - name: Corridor
    description: Query a collection or instance using a Corridor Query
  - name: Locations
    description: Get Locations associated with a collection
  - name: Location
    description: Query collection or instance via a specific location
  - name: Items
    description: Query collection or instance using Items Query. Is similar to the `/collections/{collectionId}/items` endpoints
  - name: Conformance
    description: Get conformance classes of the server
  - name: Root
    description: The landing page of the server
  - name: Service Metadata
    description: Access this document as an OpenAPI document or interact with the server via a console
  - name: POST
    description: Use POST HTTP requests instead of the conventional GET HTTP requests. Useful for parameter values exceeding allowed length
paths:
  /:
    x-exegesis-controller: rootController
    get:
      tags:
        - Capabilities
        - Root
      summary: landing page of this API
      description: The landing page provides links to the API definition, the Conformance
        statements and the metadata about the feature data in this dataset.
      x-exegesis-operationId: getRoot
      parameters:
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/link'
                  keywords:
                    $ref: '#/components/schemas/keywords'
                  provider:
                    $ref: '#/components/schemas/provider'
                  contact:
                    $ref: '#/components/schemas/contact'
            text/yaml:
              schema:
                type: string

  /conformance:
    x-exegesis-controller: conformanceController
    get:
      tags:
        - Capabilities
        - Conformance
      summary: Information about standards that this API conforms to
      description: List all requirements classes specified in a standard that the
        server conforms to
      x-exegesis-operationId: getConformance
      parameters:
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                required:
                  - links
                  - conformsTo
                properties:
                  conformsTo:
                    type: array
                    items:
                      type: string
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/link'
            text/yaml:
              schema:
                type: string

##!Work around for invalid path request
  /conformance/:
    x-exegesis-controller: conformanceController
    get:
      tags:
        - Capabilities
        - Conformance
      summary: Information about standards that this API conforms to
      description: List all requirements classes specified in a standard that the
        server conforms to
      x-exegesis-operationId: getConformance
      parameters:
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                required:
                  - links
                  - conformsTo
                properties:
                  conformsTo:
                    type: array
                    items:
                      type: string
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/link'
            text/yaml:
              schema:
                type: string

  /api:
    x-exegesis-controller: apiController
    get:
      tags:
        - Capabilities
        - Service Metadata
      summary: Get this document
      parameters:
        - $ref: '#/components/parameters/f'
      x-exegesis-operationId: getServiceDesc
      responses:
        '200':
          description: Ok.
          content:
            application/vnd.oai.openapi+json;version=3.0:
              schema:
                type: object
            text/yaml:
              schema:
                type: string

  /api.html:
    x-exegesis-controller: apiController
    get:
      tags:
        - Capabilities
        - Service Metadata
      x-exegesis-operationId: getServiceDoc
      responses:
        '200':
          description: Ok.
          content:
            text/html:
              schema:
                type: string

  /collections:
    x-exegesis-controller: collectionsController
    get:
      tags:
        - Collections
      summary: List the avialable collections from the service
      x-exegesis-operationId: getCollections
      parameters:
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/datetime'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                required:
                  - collections
                  - links
                properties:
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/link'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/collection'
            text/yaml:
              schema:
                type: string

  /collections/{collectionId}:
    x-exegesis-controller: collectionsController
    get:
      tags:
        - Collections
      summary: List query types supported by the collection
      description: This will provide information about the query types that are supported
        by the chosen collection Use content negotiation to request HTML or JSON
      x-exegesis-operationId: getCollection
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
            text/yaml:
              schema:
                type: string

  /collections/{collectionId}/instances:
    x-exegesis-controller: collectionsController
    get:
      tags:
        - Instances
        - Collections
      x-exegesis-operationId: getInstances
      parameters:
      ###! MISSING QUERY PARAMS
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instances'

  /collections/{collectionId}/instances/{instanceId}:
    x-exegesis-controller: collectionsController
    get:
      tags:
        - Instances
        - Collections
      x-exegesis-operationId: getInstance
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'

  /collections/{collectionId}/items:
    x-exegesis-controller: itemsController
    get:
      tags:
        - Items
      x-exegesis-operationId: getItemsAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/geoJsonFeatureCollection'

  ##//
  /collections/{collectionId}/items/{itemId}:
    x-exegesis-controller: itemsController
    get:
      tags:
        - Items
      x-exegesis-operationId: getItemAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/itemId'
      responses:
        '200':
          $ref: '#/components/responses/geoJsonFeature'
  ##//
  /collections/{collectionId}/instances/{instanceId}/items:
    x-exegesis-controller: itemsController
    get:
      tags:
        - Items
        - Instances
      x-exegesis-operationId: getItemsAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/datetime'
      responses:
        '200':
          $ref: '#/components/responses/geoJsonFeatureCollection'

  ##//
  /collections/{collectionId}/instances/{instanceId}/items/{itemId}:
    x-exegesis-controller: itemsController
    get:
      tags:
        - Items
        - Instances
      x-exegesis-operationId: getItemAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/itemId'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          $ref: '#/components/responses/geoJsonFeature'
  ##//
  /collections/{collectionId}/position:
    x-exegesis-controller: positionController
    get:
      tags:
        - Position
      x-exegesis-operationId: getPositionAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/positionCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Position
        - POST
      x-exegesis-operationId: getPositionAtCollection
      parameters:
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        $ref: '#/components/requestBodies/position'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
  ##//
  /collections/{collectionId}/instances/{instanceId}/position:
    x-exegesis-controller: positionController
    get:
      tags:
        - Position
        - Instances
      x-exegesis-operationId: getPositionAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/positionCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Position
        - Instances
        - POST
      x-exegesis-operationId: getPositionAtInstance
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        $ref: '#/components/requestBodies/position'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
  ##//
  /collections/{collectionId}/radius:
    x-exegesis-controller: radiusController
    get:
      tags:
        - Radius
      x-exegesis-operationId: getRadiusAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/radiusCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/within'
        - $ref: '#/components/parameters/within-units'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Radius
        - POST
      x-exegesis-operationId: getRadiusAtCollection
      parameters:
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        $ref: '#/components/requestBodies/radius'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
  ##//
  /collections/{collectionId}/instances/{instanceId}/radius:
    x-exegesis-controller: radiusController
    get:
      tags:
        - Radius
        - Instances
      x-exegesis-operationId: getRadiusAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/radiusCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/within'
        - $ref: '#/components/parameters/within-units'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Radius
        - Instances
        - POST
      x-exegesis-operationId: getRadiusAtInstance
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        $ref: '#/components/requestBodies/radius'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  ##//
  /collections/{collectionId}/area:
    x-exegesis-controller: areaController
    get:
      tags:
        - Area
      x-exegesis-operationId: getAreaAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/areaCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/resolution-x'
        - $ref: '#/components/parameters/resolution-y'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Area
        - POST
      x-exegesis-operationId: getAreaAtCollection
      requestBody:
        $ref: '#/components/requestBodies/area'
      parameters:
        - $ref: '#/components/parameters/collectionId'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  ##//
  /collections/{collectionId}/instances/{instanceId}/area:
    x-exegesis-controller: areaController
    get:
      tags:
        - Area
        - Instances
      x-exegesis-operationId: getAreaAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/areaCoords'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/resolution-x'
        - $ref: '#/components/parameters/resolution-y'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Area
        - POST
      x-exegesis-operationId: getAreaAtInstance
      requestBody:
        $ref: '#/components/requestBodies/area'
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
  ##//
  /collections/{collectionId}/cube:
    x-exegesis-controller: cubeController
    get:
      tags:
        - Cube
      x-exegesis-operationId: getCubeAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/cubeBbox'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/cube-z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Cube
        - POST
      x-exegesis-operationId: getCubeAtCollection
      requestBody:
        $ref: '#/components/requestBodies/cube'
      parameters:
        - $ref: '#/components/parameters/collectionId'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
  ##//
  /collections/{collectionId}/instances/{instanceId}/cube:
    x-exegesis-controller: cubeController
    get:
      tags:
        - Cube
        - Instances
      x-exegesis-operationId: getCubeAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/cubeBbox'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/cube-z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Cube
        - POST
      x-exegesis-operationId: getCubeAtInstance
      requestBody:
        $ref: '#/components/requestBodies/cube'
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
  ##//
  /collections/{collectionId}/locations:
    x-exegesis-controller: locationsController
    get:
      tags:
        - Locations
      description: List available location identifiers for the collection
      x-exegesis-operationId: getLocationsAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/bbox'
      responses:
        '200':
          $ref: '#/components/responses/geoJsonFeatureCollection'
    post:
      tags:
        - Locations
        - POST
      x-exegesis-operationId: getLocationsAtCollection
      requestBody:
        $ref: '#/components/requestBodies/locations'
      parameters:
        - $ref: '#/components/parameters/collectionId'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  /collections/{collectionId}/locations/{locationId}:
    x-exegesis-controller: locationsController
    get:
      tags:
        - Locations
      x-exegesis-operationId: getLocationAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/locationId'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Locations
        - POST
      x-exegesis-operationId: getLocationAtCollection
      requestBody:
        $ref: '#/components/requestBodies/locations'
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/locationId'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  /collections/{collectionId}/instances/{instanceId}/locations:
    x-exegesis-controller: locationsController
    get:
      tags:
        - Locations
        - Instances
      x-exegesis-operationId: getLocationsAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Locations
        - POST
        - Instances
      x-exegesis-operationId: getLocationsAtInstance
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        $ref: '#/components/requestBodies/location'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  /collections/{collectionId}/instances/{instanceId}/locations/{locationId}:
    x-exegesis-controller: locationsController
    get:
      tags:
        - Locations
        - Instances
      x-exegesis-operationId: getLocationAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/locationId'
        - $ref: '#/components/parameters/f'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/datetime'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Locations
        - POST
        - Instances
      x-exegesis-operationId: getLocationAtInstance
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        $ref: '#/components/requestBodies/location'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  /collections/{collectionId}/trajectory:
    x-exegesis-controller: trajectoryController
    get:
      tags:
        - Trajectory
      x-exegesis-operationId: getTrajectoryAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/trajectoryCoords' #Must be 2D
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Trajectory
        - POST
      x-exegesis-operationId: getTrajectoryAtCollection
      parameters:
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        $ref: '#/components/requestBodies/trajectory'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  /collections/{collectionId}/instances/{instanceId}/trajectory:
    x-exegesis-controller: trajectoryController
    get:
      tags:
        - Trajectory
        - Instances
      x-exegesis-operationId: getTrajectoryAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/trajectoryCoords'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/f'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Trajectory
        - POST
        - Instances
      x-exegesis-operationId: getTrajectoryAtInstance
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        $ref: '#/components/requestBodies/trajectory'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  /collections/{collectionId}/corridor:
    x-exegesis-controller: corridorController
    description: >
      A corridor returns data along and around the path defined by the coords param
    get:
      tags:
        - Corridor
      x-exegesis-operationId: getCorridorAtCollection
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/trajectoryCoords' #Must be LineString/MultiLineString
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/resolution-x'
        - $ref: '#/components/parameters/resolution-y'
        - $ref: '#/components/parameters/resolution-z'
        - $ref: '#/components/parameters/corridor-width'
        - $ref: '#/components/parameters/width-units'
        - $ref: '#/components/parameters/corridor-height'
        - $ref: '#/components/parameters/height-units'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/f' #Get metadata on the instances(versions) of the collection
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Corridor
        - POST
      x-exegesis-operationId: getCorridorAtCollection
      parameters:
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        $ref: '#/components/requestBodies/corridor'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

  /collections/{collectionId}/instances/{instanceId}/corridor:
    x-exegesis-controller: corridorController
    description: >
      A corridor returns data along and around the path defined by the coords param
    get:
      tags:
        - Corridor
        - Instances
      x-exegesis-operationId: getCorridorAtInstance
      parameters:
        - $ref: '#/components/parameters/download'
        - $ref: '#/components/parameters/trajectoryCoords' #Must be LineString/MultiLineString
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/z'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/parameter-name'
        - $ref: '#/components/parameters/resolution-x'
        - $ref: '#/components/parameters/resolution-y'
        - $ref: '#/components/parameters/resolution-z'
        - $ref: '#/components/parameters/corridor-width'
        - $ref: '#/components/parameters/width-units'
        - $ref: '#/components/parameters/corridor-height'
        - $ref: '#/components/parameters/height-units'
        - $ref: '#/components/parameters/crs'
        - $ref: '#/components/parameters/f' #Get metadata on the instances(versions) of the collection
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'
    post:
      tags:
        - Corridor
        - POST
        - Instances
      x-exegesis-operationId: getCorridorAtInstance
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        $ref: '#/components/requestBodies/corridor'
      responses:
        '200':
          $ref: '#/components/responses/covJson_edrGeoJson_yaml'

components:
  schemas:
    link:
      type: object
      required:
        - href
        - rel
      properties:
        href:
          type: string

        rel:
          type: string
          example: [self, alternate]
        type:
          description: The content-type of the linked resource
          type: string
          example: [application/json, application/geo+json]
        hreflang:
          description: The language of the linked resource.
          type: string
          example: [en, sw, ch]
        title:
          type: string
        length:
          description: The size of the resource. Preferrably in bytes
          type: integer
        templated:
          description: >
            Defines if the link href value is a template with values requiring replacement",
          type: boolean
    keywords:
      type: array
      items:
        type: string
      description: >
        Key identifiers of the resources provided by this API
      example: [temperature, wind]
    provider:
      type: object
      properties:
        name:
          description: >
            Name of the org providing the info
          type: string
        url:
          type: string

          description: >
            Link to the provider's website
    contact:
      type: object
      properties:
        email:
          type: string

          description: >
            email of the service provider
        phone:
          description: >
            phone number of provider
          type: string

        fax:
          description: >
            Fax number of service provider
          type: string
        hours:
          type: string
          description: Operating hours of the service provider
        instructions: #Probably how to contact them?
          type: string
        address:
          type: string
          description: Alphanumeric code for physical address of the service provider. To be used in conjuction with? postalcode/city/province
        city:
          type: string
          description: City of residence of service provider
        stateorprovince:
          type: string
        country:
          type: string
          description: Can be a name, ISO2 or ISO3 code
    extent:
      type: object
      description: Spatial-temporal bounds of the collection and their metadata
      required:
        - spatial
        - temporal
      properties:
        spatial:
          type: object
          description: Spatial bounds of the collection
          required:
            - bbox
            - crs
          properties:
            bbox:
              $ref: '#/components/schemas/bbox'
            crs:
              type: string

              description: Will use the schema http://www.opengis.net/def/crs/{authority}/{version}/{code}
            name:
              description: |-
                Name of vertical coordinate system? ###
              type: string
        temporal:
          description: Temporal bounds of collection
          type: object
          required:
            - interval
            - trs
          properties:
            interval:
              $ref: '#/components/schemas/interval'
            trs:
              type: string

            values:
              description: >
                Provides information about the time intervals available in the collection \nas ISO8601 compliant dates, either as a time range specified \nas start time / end time  (e.g. 2017-11-14T09:00Z/2017-11-14T21:00Z)  or\nas number of repetitions / start time / interval (e.g. R4/2017-11-14T21:00Z/PT3H) \nor a list of time values (e.g.\n2017-11-14T09:00Z,2017-11-14T12:00Z,2017-11-14T15:00Z,2017-11-14T18:00Z,2017-11-14T21:00Z)
              type: array
              minItems: 1
              items:
                type: string
                minItems: 1
                nullable: true
                format: date-time
                example:
                  - ['2020-11-12T12:15Z']
                  - ['2020-11-12T12:15Z', '2020-11-12T12:30Z', '2020-11-12T12:45Z']
                  - ['R12/2022-01-14T09:00Z/2022-01-15T09:00Z']
                  - ['R12/2022-01-14T09:00Z/PT1H']
                  - [
                      'R12/2022-01-14T09:00Z/PT1H',
                      'R4/2022-01-14T21:00Z/PT3H',
                      'R4/2022-01-14T21:00Z/PT6H'
                    ]

            name:
              description: Name of the trs
              type: string
        vertical:
          type: object
          description: The vertical extent of information in the collection
          required:
            - interval
            - vrs
          properties:
            interval:
              type: array
              description: In the Core only a single time interval is supported. Extensions may support\nmultiple intervals. If multiple intervals are provided, the union of the\nintervals describes the vertical extent.
              minItems: 1
              items:
                type: array
                description: minimum and maximum heights of the vertical interval. The values are in the\nvertical coordinate reference system specified in `vrs`. By default\nthis is the vertical coordinate reference system of the source information.
                minItems: 1
                items:
                  type: string
                  nullable: true
              example: [[number|null, number|nul]]
            values:
              type: array
              minItems: 1
              items:
                type: string
                nullable: true
                example: [[2/100], [R50/1000/-50], ['2', '100', '80', '100']]
            vrs:
              description: Coordinate reference system of the coordinates in the vertical extent\n(property `interval`).
              type: string

            name:
              description: Name of the Vertical ref system
              type: string
    collection:
      type: object
      required:
        - links
        - id
        - extent
        - data_queries
        - parameter_names
        - output_formats
        - crs
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        id:
          type: string
          description: Unique identifier of the collection
        title:
          type: string
          description: Summary of the collection
        description:
          type: string
          description: More detailed summary of the collection
        keywords:
          $ref: '#/components/schemas/keywords'
        extent:
          $ref: '#/components/schemas/extent'
        data_queries:
          description: Detailed information about individual query types
          type: object
          properties:
            area:
              type: object
              properties:
                link:
                  $ref: '#/components/schemas/areaLink'
            position:
              type: object
              properties:
                link:
                  $ref: '#/components/schemas/positionLink'
            trajectory:
              type: object
              properties:
                link:
                  $ref: '#/components/schemas/trajectoryLink'
            corridor:
              type: object
              properties:
                link:
                  $ref: '#/components/schemas/corridorLink'
            locations:
              type: object
              properties:
                link:
                  $ref: '#/components/schemas/locationsLink'
            instances:
              type: object
              properties:
                link:
                  $ref: '#/components/schemas/instancesLink'
            items:
              type: object
              properties:
                link:
                  $ref: '#/components/schemas/instancesLink'
            radiusLink:
              type: object
              properties:
                link:
                  $ref: '#/components/schemas/radiusLink'
        crs:
          type: array
          items:
            type: string

        output_formats:
          type: array
          items:
            type: string
        parameter_names:
          description: list of the data parameters available in the collection
          type: object
          additionalProperties:
            items:
              $ref: '#/components/schemas/parameterNames'
    parameterNames:
      type: object
      required:
        - observedProperty
        - type
      properties:
        type:
          type: string
          enum:
            - Parameter
        description:
          type: string
        label:
          type: string
        data-type:
          description: Data type of returned parameter
          type: string
          enum:
            - integer
            - float
            - string
        unit:
          $ref: '#/components/schemas/units'
        observedProperty:
          $ref: '#/components/schemas/observedPropertyCollection'
        categoryEncoding:
          type: object
          additionalProperties:
            oneOf:
              - type: integer
              - type: array
                items:
                  type: integer
        extent:
          $ref: '#/components/schemas/extent'
        id:
          description: Unique ID of the parameter, this is the value used for querying the data
          type: string
        measurementType:
          type: object
          title: Parameter measurement approach
          description: Approach to calculating the data values
          required:
            - method
          properties:
            method:
              type: string
            duration:
              type: string
              title: Measurement time duration
              description: The time duration that the value was calculated for as an RFC3339
                duration value.  If the method value is instantaneous this value is
                not required.
              example: PT10M
    units:
      type: object
      title: Unit name
      description: Definition of data units
      anyOf:
        - required:
            - label
        - required:
            - symbol
        - required:
            - symbol
            - label
      properties:
        label:
          additionalProperties:
            type: string
        symbol:
          title: Describe unit symbol
          oneOf:
            - type: object
              description: Information about the symbol used to describe the units
              required:
                - value
                - type
              properties:
                value:
                  description: Representation of the unit's symbol
                  type: string
                type:
                  type: string
                  description: uri to detailed description of the unit's
            - type: string
        id:
          type: string
    observedPropertyCollection:
      type: object
      title: Name of property
      required:
        - label
      properties:
        id:
          description: URI linking to an external registry which contains the definitive definition of the observed property
          type: string
        label:
          oneOf:
            - type: string
            - type: object
        description:
          type: string
        categories:
          type: array
          items:
            minItems: 1
            type: object
            required:
              - id
              - label
            properties:
              id:
                $ref: '#/components/schemas/observedPropertyCollection/properties/id'
              label:
                oneOf:
                  - type: string
                  - type: object
              description:
                oneOf:
                  - type: string
                  - type: object
                    required:
                      - en
                    properties:
                      en:
                        type: string
    radiusLink:
      allOf:
        - $ref: '#/components/schemas/link'
      properties:
        href:
          type: string
        variables:
          allOf:
            - $ref: '#/components/schemas/dataQuery'
          properties:
            query_type:
              type: string
              enum:
                - radius
            within-units:
              type: array
              items:
                type: string
    corridorLink:
      allOf:
        - $ref: '#/components/schemas/link'
      properties:
        href:
          type: string

        variables:
          allOf:
            - $ref: '#/components/schemas/dataQuery'
          required:
            - query_type
          properties:
            query_type:
              type: string
              enum:
                - corridor
            width-units:
              description: List of width distance units values that can be used in the query
              type: array
              items:
                type: string
            height-units:
              description: List of height distance unit values that can be used in the query
              type: array
              items:
                type: string
    positionLink:
      allOf:
        - $ref: '#/components/schemas/link'
      properties:
        href:
          type: string

        variables:
          allOf:
            - $ref: '#/components/schemas/dataQuery'
          required:
            - query_type
          properties:
            query_type:
              type: string
              enum:
                - position
    trajectoryLink:
      allOf:
        - $ref: '#/components/schemas/link'
      properties:
        href:
          type: string

        variables:
          allOf:
            - $ref: '#/components/schemas/dataQuery'
          properties:
            query_type:
              type: string
              enum:
                - trajectory
    locationsLink:
      allOf:
        - $ref: '#/components/schemas/link'
      properties:
        href:
          type: string

        variables:
          allOf:
            - $ref: '#/components/schemas/dataQuery'
          properties:
            query_type:
              type: string
              enum:
                - locations
    instancesLink:
      allOf:
        - $ref: '#/components/schemas/link'
      properties:
        href:
          type: string

        variables:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            query_type:
              type: string
              enum:
                - instances
    itemsLink:
      allOf:
        - $ref: '#/components/schemas/link'
      properties:
        href:
          type: string

        variables:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            query_type:
              type: string
              enum:
                - items
    dataQuery:
      type: object
      description: Property to contain any extra metadata information that is specific to an individual data query
      required:
        - title
        - description
        - output_formats
        - default_output_format
        - crs_details
      properties:
        title:
          description: Title of the Query
          type: string
        description:
          description: Description of the query.
          type: string
        output_formats:
          description: List of output formats supported by the query_type
          type: array
          items:
            type: string
        default_output_format:
          type: string
        crs_details:
          type: array
          items:
            $ref: '#/components/schemas/crsObject'
    crsObject:
      type: object
      required:
        - crs
        - wkt
      properties:
        crs:
          description: Name of the coordinate ref system used as the value in the crs query param to define the required output CRS
          type: string

        wkt:
          description: Well Known Text description of the coordinate ref. system
          type: string
    areaLink:
      allOf:
        - $ref: '#/components/schemas/link'
      properties:
        href:
          type: string
        variables:
          allOf:
            - $ref: '#/components/schemas/dataQuery'
          required:
            - query_type
          properties:
            query_type:
              type: string
              enum: [area]
    instances:
      type: object
      required:
        - links
        - instances
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        instances:
          type: array
          items:
            $ref: '#/components/schemas/collection'
    bbox:
      description: >-
        `From OGC API- Features Doc`
        Only features that have a geometry that intersects the bounding box are
        selected.

        The bounding box is provided as four or six numbers, depending on
        whether the

        coordinate reference system includes a vertical axis (height or depth):


        * Lower left corner, coordinate axis 1

        * Lower left corner, coordinate axis 2

        * Minimum value, coordinate axis 3 (optional)

        * Upper right corner, coordinate axis 1

        * Upper right corner, coordinate axis 2

        * Maximum value, coordinate axis 3 (optional)


        If the value consists of four numbers, the coordinate reference system
        is

        WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)

        unless a different coordinate reference system is specified in the
        parameter `bbox-crs`.


        If the value consists of six numbers, the coordinate reference system is
        WGS 84

        longitude/latitude/ellipsoidal height
        (http://www.opengis.net/def/crs/OGC/0/CRS84h)

        unless a different coordinate reference system is specified in the
        parameter `bbox-crs`.


        The query parameter `bbox-crs` is specified in OGC API - Features - Part
        2: Coordinate

        Reference Systems by Reference.


        For WGS 84 longitude/latitude the values are in most cases the sequence
        of

        minimum longitude, minimum latitude, maximum longitude and maximum
        latitude.

        However, in cases where the box spans the antimeridian the first value

        (west-most box edge) is larger than the third value (east-most box
        edge).


        If the vertical axis is included, the third and the sixth number are the

        bottom and the top of the 3-dimensional bounding box.


        If a feature has multiple spatial geometry properties, it is the
        decision of the

        server whether only a single spatial geometry property is used to
        determine

        the extent or all relevant geometries.
      type: array
      minItems: 1
      items:
        type: array
        items:
          type: number
        oneOf:
          - minItems: 4
            maxItems: 4
          - minItems: 6
            maxItems: 6
    interval:
      type: array
      minItems: 1
      items:
        type: array
        minItems: 2
        maxItems: 2
        items:
          type: string
    GeoJsonObject:
      description: >
        GeoJSon object

        The coordinate reference system for all GeoJSON coordinates is a
        geographic coordinate reference system, using the World Geodetic System
        1984 (WGS 84) datum, with longitude and latitude units of decimal
        degrees. This is equivalent to the coordinate reference system
        identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL
        third-position element SHALL be the height in meters above or below the
        WGS 84 reference ellipsoid. In the absence of elevation values,
        applications sensitive to height or depth SHOULD interpret positions as
        being at local ground or sea level.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      type: object
      properties:
        type:
          type: string
          enum:
            - Feature
            - FeatureCollection
            - Point
            - MultiPoint
            - LineString
            - MultiLineString
            - Polygon
            - MultiPolygon
            - GeometryCollection
    Geometry:
      description: >
        Abstract type for all GeoJSon object except Feature and
        FeatureCollection
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Point
                - MultiPoint
                - LineString
                - MultiLineString
                - Polygon
                - MultiPolygon
                - GeometryCollection
          required:
            - type
          discriminator:
            propertyName: type
    GeometryElement:
      description: >
        Abstract type for all GeoJSon 'Geometry' object the type of which is not
        'GeometryCollection'
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Point
                - MultiPoint
                - LineString
                - MultiLineString
                - Polygon
                - MultiPolygon
          required:
            - type
          discriminator:
            propertyName: type
    Feature:
      description: GeoJSon 'Feature' object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          required:
            - geometry
            - properties
          properties:
            geometry:
              allOf:
                - nullable: true
                - $ref: '#/components/schemas/Geometry'
            properties:
              type: object
              nullable: true
            id:
              oneOf:
                - type: number
                - type: string
    FeatureCollection:
      description: GeoJSon 'FeatureCollection' object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          required:
            - features
          properties:
            features:
              type: array
              items:
                $ref: '#/components/schemas/Feature'
    Position:
      description: >
        GeoJSon fundamental geometry construct.

        A position is an array of numbers. There MUST be two or more elements.
        The first two elements are longitude and latitude, or easting and
        northing, precisely in that order and using decimal numbers. Altitude or
        elevation MAY be included as an optional third element.

        Implementations SHOULD NOT extend positions beyond three elements
        because the semantics of extra elements are unspecified and ambiguous.
        Historically, some implementations have used a fourth element to carry a
        linear referencing measure (sometimes denoted as "M") or a numerical
        timestamp, but in most situations a parser will not be able to properly
        interpret these values. The interpretation and meaning of additional
        elements is beyond the scope of this specification, and additional
        elements MAY be ignored by parsers.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.1
      type: array
      minItems: 2
      maxItems: 3
      items:
        type: number
    LineStringCoordinates:
      description: |
        GeoJSon fundamental geometry construct, array of two or more positions.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.4
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 2
    LinearRing:
      description: >
        A linear ring is a closed LineString with four or more positions
        The first and last positions are equivalent, and they MUST contain
        identical values; their representation SHOULD also be identical.

        A linear ring is the boundary of a surface or the boundary of a hole in
        a surface.

        A linear ring MUST follow the right-hand rule with respect to the area
        it bounds, i.e., exterior rings are counterclockwise, and holes are
        clockwise.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 4
    Point:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.2
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - Point
            coordinates:
              $ref: '#/components/schemas/Position'
    MultiPoint:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.3
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/Position'
    LineString:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.4
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              $ref: '#/components/schemas/LineStringCoordinates'
    MultiLineString:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.5
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/LineStringCoordinates'
    Polygon:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/LinearRing'
    MultiPolygon:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.7
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/LinearRing'
    GeometryCollection:
      type: object
      description: >
        GeoJSon geometry collection

        GeometryCollections composed of a single part or a number of parts of a
        single type SHOULD be avoided when that single part or a single object
        of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could
        be used instead.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.8
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          required:
            - geometries
          properties:
            geometries:
              type: array
              items:
                $ref: '#/components/schemas/GeometryElement'
              minItems: 0
    edrGeoJsonFeature:
      type: object
      properties:
        geometry:
          oneOf:
            - $ref: '#/components/schemas/Point'
            - $ref: '#/components/schemas/MultiPoint'
            - $ref: '#/components/schemas/LineString'
            - $ref: '#/components/schemas/MultiLineString'
            - $ref: '#/components/schemas/Polygon'
            - $ref: '#/components/schemas/MultiPolygon'
            - $ref: '#/components/schemas/GeometryCollection'
        id:
          oneOf:
            - type: string
            - type: number
        properties:
          type: object
          required:
            - datetime
            - parameter-name
            - label
            - edrqueryendpoint
          properties:
            datetime:
              type: string
            parameter-name:
              type: array
              items:
                type: string
            label:
              type: string
              default: ''
            edrqueryendpoint:
              type: string
              default: ''
    parameter:
      type: object
      required:
        - type
        - observedProperty
      properties:
        id:
          type: string
        type:
          type: string
          enum: [Parameter]
        description:
          $ref: '#/components/schemas/i18n'
        observedProperty:
          $ref: '#/components/schemas/edrGeoJsonObservedProperty'
        unit:
          $ref: '#/components/schemas/edrGeoJsonUnit'
        categoryEncoding:
          type: object
          description: Map Ids of the categoris in the observedProperty to range values
          additionalProperties:
            oneOf:
              - type: integer
              - type: array
                items:
                  type: integer
    edrGeoJsonObservedProperty:
      type: object
      description: >
        A definition of the quantity being measured
      required:
        - label
      properties:
        id:
          type: string
        label:
          $ref: '#/components/schemas/i18n'
        description:
          $ref: '#/components/schemas/i18n'
        categories:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - id
              - label
              - description
            properties:
              id:
                $ref: '#/components/schemas/i18n'
              label:
                $ref: '#/components/schemas/i18n'
              description:
                $ref: '#/components/schemas/i18n'
    i18n:
      type: object
      description: >
        Object representing an internationalised string.
      additionalProperties:
        type: string
    edrGeoJsonUnit:
      type: object
      description: >
        The units of measure
      properties:
        id:
          type: string
        label:
          $ref: '#/components/schemas/i18n'
        symbol:
          oneOf:
            - type: string
            - type: object
              required:
                - value
                - type
              properties:
                type:
                  type: string
                value:
                  type: string
      oneOf:
        - required:
            - label
        - required:
            - symbol
    edrGeoJsonFeatureCollection:
      type: object
      properties:
        type:
          type: string
          enum: [FeatureCollection]
        features:
          type: array
          items:
            $ref: '#/components/schemas/edrGeoJsonFeature'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/parameter'
        timeStamp:
          type: string
          format: date-time
        numberMatched:
          type: number

        numberReturned:
          type: number

        links:
          type: array
          items:
            $ref: '#/components/schemas/link'

    # CoverageJson Schemas
    coverageJSON:
      type: object
      title: CoverageJSON
      description: A geospatial coverage interchange format based on the JavaScript Object Notation (JSON)
      required:
        - type
      properties:
        type:
          description: coverage domain type
          type: string
          enum:
            - Coverage
            - CoverageCollection
            - Domain
        domainType:
          type: string
        coverages:
          type: array
          items:
            type: object
            required:
              - type
              - domain
              - ranges
            properties:
              type:
                description: coverage domain type
                type: string
                enum:
                  - Coverage
              domain:
                $ref: '#/components/schemas/domain'
              ranges:
                additionalProperties:
                  type: object
                  $ref: '#/components/schemas/ndArray' #Beware of error
        ranges:
          type: object
          additionalProperties:
            type: object
            $ref: '#/components/schemas/ndArray'
        referencing:
          type: array
          items:
            $ref: '#/components/schemas/referenceSystemConnection'
          minItems: 1

    anyAxis:
      oneOf:
        - $ref: '#/components/schemas/valuesAxis'
        - $ref: '#/components/schemas/numericRegularlySpacedAxis'
    domain:
      description: A domain which defines a set of positions and their extents in one or more referencing systems
      type: object
      required:
        - type
        - axes
      properties:
        type:
          type: string
          enum:
            - Domain
        domainType:
          type: string
        axes:
          type: object
          oneOf:
            - description: Grid domain-> x and y are required, z & t are optional
              required:
                - x
                - y
              properties:
                x:
                  $ref: '#/components/schemas/numericAxis'
                y:
                  $ref: '#/components/schemas/numericAxis'
                t:
                  $ref: '#/components/schemas/numericAxis'
                z:
                  $ref: '#/components/schemas/numericAxis'
            - description: Trajectory domain -> Mandatory composite axis and optional z axis
              properties:
                axes:
                  properties:
                    composite:
                      $ref: '#/components/schemas/tupleValuesAxis'
                    z:
                      $ref: '#/components/schemas/numericAxis'
                  required:
                    - composite
        referencing:
          type: array
          items:
            $ref: '#/components/schemas/referenceSystemConnection'
    ndArray:
      description: Object representing a multidimensional (>=0D) array with named axes, encoded as a flat one-dimensional array in row-major order
      type: object
      required:
        - type
        - dataType
        - values
      properties:
        type:
          type: string
          enum:
            - NdArray
        dataType:
          enum:
            - float
            - integer
            - string
        shape:
          type: array
          items:
            type: number
        axisNames:
          type: array
          items:
            type: string
          uniqueItems: true
        values:
          type: array
          nullable: true
          items:
            type: number
          minItems: 1
      oneOf:
        - properties:
            values:
              type: array
              nullable: true
              items:
                type: number

        - properties:
            values:
              type: array
              nullable: true
              items:
                type: integer
        - properties:
            values:
              type: array
              nullable: true
              items:
                type: string
        - properties:
            shape:
              minItems: 1
            axisNames:
              minItems: 1
          required:
            - shape
            - axisNames
    numericAxis:
      description: Simple axis with numeric values
      oneOf:
        - $ref: '#/components/schemas/numericValuesAxis'
        - $ref: '#/components/schemas/numericRegularlySpacedAxis'
    numericRegularlySpacedAxis:
      description: A regularly-spaced numeric axis
      type: object
      required:
        - start
        - stop
        - num
      additionalProperties: false
      properties:
        start:
          type: number
        stop:
          type: number
        num:
          type: integer
          minimum: 1
    numericValuesAxis:
      description: Axis defined by list of numeric axis values and optional bounds
      allOf:
        - $ref: '#/components/schemas/valuesAxisBase'
        - properties:
            values:
              type: array
              items:
                type: number
            bounds:
              type: array
              items:
                type: number
          additionalProperties: false
    polygonValuesAxis:
      description: Polygon based Axis
      allOf:
        - $ref: '#/components/schemas/valuesAxisBase'
        - required:
            - dataType
            - values
            - coordinates
          additionalProperties: false
          properties:
            dataType:
              type: string
              enum:
                - polygon
            coordinates: {}
            values:
              type: array
              items:
                description: A GeoJSON polygon
                type: array
                minItems: 1
                items:
                  type: array
                  minItems: 1
                  items:
                    description: The Inner array -> The coordinates themselves
                    type: array
                    minItems: 2
                    items:
                      type: number
    primitiveValuesAxis:
      description: Validates any axis with primitive values
      allOf:
        - $ref: '#/components/schemas/valuesAxisBase'
        - description: This redundant branch exists to fail early with succinct errors
          properties:
            values:
              items:
                oneOf:
                  - type: number
                  - type: string
        - oneOf:
            - $ref: '#/components/schemas/numericValuesAxis'
            - $ref: '#/components/schemas/stringValuesAxis'
    referenceSystem:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      oneOf:
        - description: Temporal reference system
          properties:
            calendar:
              type: string
            timeScale:
              type: string
          required:
            - calendar
        - description: An identifier-based reference system
          required:
            - targetConcept
          properties:
            id:
              type: string
            label:
              $ref: '#/components/schemas/i18n'
            description:
              $ref: '#/components/schemas/i18n'
            targetConcept:
              type: object
              required:
                - label
              properties:
                id:
                  type: string
                label:
                  $ref: '#/components/schemas/i18n'
                description:
                  $ref: '#/components/schemas/i18n'
    referenceSystemConnection:
      description: 'Reference System Connection object: connects coordinates to reference systems'
      type: object
      required:
        - coordinates
        - system
      properties:
        coordinates:
          type: array
          items:
            type: string
          minItems: 1
        system:
          $ref: '#/components/schemas/referenceSystem'
    stringValuesAxis:
      description: Simple axis with string values (e.g. time strings)
      allOf:
        - $ref: '#/components/schemas/valuesAxisBase'
        - properties:
            values:
              type: array
              items:
                type: string
            bounds:
              type: array
              items:
                type: string
          additionalProperties: false
    tupleValuesAxis:
      description: Tuple-based axis
      allOf:
        - $ref: '#/components/schemas/valuesAxisBase'
        - properties:
            dataType:
              type: string
              enum:
                - tuple
            values:
              type: array
              items:
                description: A tuple of axis values (numbers/strings)
                type: array
                minItems: 2
                items:
                  anyOf:
                    - type: number
                    - type: string
            coordinates: {}
          required:
            - dataType
            - values
            - coordinates
          additionalProperties: false
    valuesAxis:
      description: Validates any values-based axis
      oneOf:
        - $ref: '#/components/schemas/valuesAxisBase'
        - $ref: '#/components/schemas/primitiveValuesAxis'
        - $ref: '#/components/schemas/tupleValuesAxis'
        - $ref: '#/components/schemas/polygonValuesAxis'
    valuesAxisBase:
      type: object
      required:
        - values
      properties:
        dataType:
          type: string
          not:
            enum:
              - primitive
        values:
          type: array
          minItems: 1
          items:
            oneOf:
              - type: string
              - type: number #repo/schemas/covjson/valuesAxisBase missing the type
          uniqueItems: true
        coordinates:
          type: array
          minItems: 2
          items:
            type: string
        bounds:
          description: Optional axis bounds. Shall be twice as long( and same data type as "values")
          type: array
          minItems: 2
          items:
            oneOf:
              - type: string
              - type: number #repo/schemas/covjson/valuesAxisBase missing the type
  parameters:
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 500
        default: 100
      style: form
      explode: false
    offset:
      in: query
      name: offset
      required: false
      schema:
        oneOf:
          - type: string
            enum:
              - NaN
          - type: integer
            minimum: 0
            default: 0
      style: form
      explode: false
    crs:
      name: crs
      description: >
        The default CRS is http://www.opengis.net/def/crs/OGC/1.3/CRS84 which is
        parsed as http://www.opengis.net/def/crs/EPSG/0/4326. All the coordinate
        reference systems supported by PostGIS v3.4.0 are supported by this API.
        They are all listed here and also otherible at the
        {baseURL}/spatial_ref_sys endpoint.
      in: query
      required: false
      schema:
        type: string
        default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
      style: form
      explode: false
    f:
      name: f
      in: query
      required: false
      schema:
        type: string
        #default: json
    bbox:
      name: bbox
      in: query
      description: |-
        Only features that have a geometry that intersects the bounding box are selected.
        The bounding box is provided as four or six numbers, depending on whether the
        coordinate reference system includes a vertical axis (height or depth):
        * Lower left corner, coordinate axis 1
        * Lower left corner, coordinate axis 2
        * Minimum value, coordinate axis 3 (optional)
        * Upper right corner, coordinate axis 1
        * Upper right corner, coordinate axis 2
        * Maximum value, coordinate axis 3 (optional)
        The coordinate reference system of the values is WGS 84 longitude/latitude
        (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate
        reference system is specified in the parameter `bbox-crs`.
        For WGS 84 longitude/latitude the values are in most cases the sequence of
        minimum longitude, minimum latitude, maximum longitude and maximum latitude.
        However, in cases where the box spans the antimeridian the first value
        (west-most box edge) is larger than the third value (east-most box edge).
        If the vertical axis is included, the third and the sixth number are the
        bottom and the top of the 3-dimensional bounding box.
        If a feature has multiple spatial geometry properties, it is the decision of the
        server whether only a single spatial geometry property is used to determine
        the extent or all relevant geometries.
      required: false
      schema:
        oneOf:
          - items:
              type: number
            type: array
            minItems: 4
            maxItems: 4
          - items:
              type: number
            type: array
            minItems: 6
            maxItems: 6
      style: form
      explode: false
    cubeBbox:
      name: bbox
      in: query
      description: |-
        Only features that have a geometry that intersects the bounding box are selected.
        The bounding box is provided as four or six numbers, depending on whether the
        coordinate reference system includes a vertical axis (height or depth):
        * Lower left corner, coordinate axis 1
        * Lower left corner, coordinate axis 2
        * Minimum value, coordinate axis 3 (optional)
        * Upper right corner, coordinate axis 1
        * Upper right corner, coordinate axis 2
        * Maximum value, coordinate axis 3 (optional)
        The coordinate reference system of the values is WGS 84 longitude/latitude
        (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate
        reference system is specified in the parameter `bbox-crs`.
        For WGS 84 longitude/latitude the values are in most cases the sequence of
        minimum longitude, minimum latitude, maximum longitude and maximum latitude.
        However, in cases where the box spans the antimeridian the first value
        (west-most box edge) is larger than the third value (east-most box edge).
        If the vertical axis is included, the third and the sixth number are the
        bottom and the top of the 3-dimensional bounding box.
        If a feature has multiple spatial geometry properties, it is the decision of the
        server whether only a single spatial geometry property is used to determine
        the extent or all relevant geometries.
      ## Try and check if setting it to true is causing the error:
      ## Expected property 'schema ->type' with value 'string' but was null
      required: true
      schema:
        oneOf:
          - items:
              type: number
            type: array
            minItems: 4
            maxItems: 4
          - items:
              type: number
            type: array
            minItems: 6
            maxItems: 6
      style: form
      explode: false
    datetime:
      name: datetime
      in: query
      description: >-
        `From OGC API-Features`
        Either a date-time or an interval. Date and time expressions adhere to
        RFC 3339.

        Intervals may be bounded or half-bounded (double-dots at start or end).


        Examples:


        * A date-time: "2018-02-12T23:20:50Z"

        * A bounded interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"

        * Half-bounded intervals: "2018-02-12T00:00:00Z/.." or
        "../2018-03-18T12:31:12Z"


        Only features that have a temporal property that intersects the value of

        `datetime` are selected.


        If a feature has multiple temporal properties, it is the decision of the

        server whether only a single temporal property is used to determine

        the extent or all relevant temporal properties.


        The only currently supported intervals are those provided as an example.
        If they 

        do not `..` for unbounded or / for bounded intervals, `error(500)` `as
        of now`
      required: false
      schema:
        type: string
        description: https://regex101.com/r/NjdLnJ/1
        format: datetimeRegex
      style: form
      explode: false
    areaCoords:
      in: query
      name: coords
      description: |-
        Only data that has a geometry that intersects the area defined by the polygon
        are selected. 

        The polygon is defined using a Well Known Text string following 

        coords=POLYGON((x y,x1 y1,x2 y2,...,xn yn x y))

        which are values in the coordinate system defined by the crs query parameter 
        (if crs is not defined the values will be assumed to be WGS84 longitude/latitude coordinates).  

        For instance a polygon that roughly describes an area that contains 
        South West England in WGS84 would look like: 

        coords=POLYGON((-6.1 50.3,-4.35 51.4,-2.6 51.6,-2.8 50.6,-5.3 49.9,-6.1,50.3))

        see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

        The coords parameter will only support 2D POLYGON definitions
      required: true
      schema:
        type: string
    positionCoords:
      name: coords
      in: query
      required: true
      schema:
        type: string

      description: |+
        location(s) to return data for, the coordinates are defined by a Well Known Text
        (wkt) string. to retrieve a single location :

        POINT(x y) i.e. POINT(0 51.48) for Greenwich, London

        And for a list of locations

        MULTIPOINT((x y),(x1 y1),(x2 y2),(x3 y3))

        i.e.
        MULTIPOINT((38.9 -77),(48.85 2.35),(39.92 116.38),(-35.29 149.1),(51.5 -0.1))

        see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

        the coordinate values will depend on the CRS parameter, if this is not defined
        the values will be assumed to WGS84 values (i.e x=longitude and y=latitude)
    radiusCoords:
      name: coords
      in: query
      required: true
      schema:
        type: string
      description: |+
        location(s) to return data for, the coordinates are defined by a Well Known Text
         (wkt) string. to retrieve a single location :

         POINT(x y) i.e. POINT(0 51.48) for Greenwich, London

         see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
         https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

         the coordinate values will depend on the CRS parameter, if this is not defined
         the values will be assumed to WGS84 values (i.e x=longitude and y=latitude)
    trajectoryCoords:
      in: query
      name: coords
      required: true
      schema:
        type: string
      style: form
      explode: false
      description: |-
        Only data that has a geometry that intersects the area defined by the linestring
        are selected. 

        The trajectory is defined using a Well Known Text string following 

        A 2D trajectory, on the surface of earth with no time or height dimensions: 
            coords=LINESTRING(-2.87 51.14 , -2.98 51.36,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )

        A 2D trajectory, on the surface of earth with all for the same time and no height dimension, time value defined in ISO8601 format by the `datetime` query parameter : 
            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )&time=2018-02-12T23:00:00Z 
            
        A 2D trajectory, on the surface of earth with no time value but at a fixed height level, height defined in the collection height units by the `z` query parameter : 
            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )&z=850 

        A 2D trajectory, on the surface of earth with all for the same time and at a fixed height level, time value defined in ISO8601 format by the `datetime` query parameter and height defined in the collection height units by the `z` query parameter : 
            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )&time=2018-02-12T23:00:00Z&z=850 

        A 3D trajectory, on the surface of the earth but over a time range with no height values:
        coords=LINESTRINGM(-2.87 51.14  1560507000,-2.98 51.36  1560507600,-3.15 51.03  1560508200,-3.48 50.74  1560508500,-3.36 50.9  1560510240)

        A 3D trajectory, on the surface of the earth but over a time range with a fixed height value, height defined in the collection height units by the `z` query parameter : 
        coords=LINESTRINGM(-2.87 51.14  1560507000,-2.98 51.36  1560507600,-3.15 51.03  1560508200,-3.48 50.74  1560508500,-3.36 50.9  1560510240)&z=200


        A 3D trajectory, through a 3D volume with height or depth, but no defined time:
        coords=LINESTRINGZ(-2.87 51.14  0.1,-2.98 51.36  0.2,-3.15 51.03  0.3,-3.48 50.74  0.4,-3.36 50.9  0.5)

        A 3D trajectory, through a 3D volume with height or depth, but a fixed time time value defined in ISO8601 format by the `datetime` query parameter:
        coords=LINESTRINGZ(-2.87 51.14  0.1,-2.98 51.36  0.2,-3.15 51.03  0.3,-3.48 50.74  0.4,-3.36 50.9  0.5)&time=2018-02-12T23:00:00Z

        A 4D trajectory, through a 3D volume but over a time range:
        coords=LINESTRINGZM(-2.87 51.14 0.1 1560507000,-2.98 51.36 0.2 1560507600,-3.15 51.03 0.3 1560508200, -3.48 50.74 0.4 1560508500, -3.36 50.9 0.5 1560510240)
        (using either the `time` or `z` parameters with a 4D trajectory wil generate an error response)

        where Z in `LINESTRINGZ` and `LINESTRINGZM` refers to the height value.  
        `If the specified CRS does not define the height units, the heights units will default to metres above mean sea level`

        and the M in `LINESTRINGM` and `LINESTRINGZM` refers to the number of seconds that have elapsed since the Unix epoch, that is the time 00:00:00 UTC on 1 January 1970. See
        https://en.wikipedia.org/wiki/Unix_time
    z:
      name: z
      in: query
      description: |+
        Define the vertical level to return data from 
        i.e. z=level

        for instance if the 850hPa pressure level is being queried

        z=850

        or a range to return data for all levels between and including 2 defined levels
        i.e. z=minimum value/maximum value

        for instance if all values between and including 10m and 100m

        z=10/100

        finally a list of height values can be specified
        i.e. z=value1,value2,value3

        for instance if values at 2m, 10m and 80m are required

        z=2,10,80

        An Arithmetic sequence using Recurring height intervals, the difference is the number of recurrences is defined at the start 
        and the amount to increment the height by is defined at the end

        i.e. z=Rn/min height/height interval

        so if the request was for 20 height levels 50m apart starting at 100m:

        z=R20/100/50

        When not specified data from all available heights SHOULD be returned
      required: false
      schema:
        type: string
        format: zRegex
      style: form
      explode: false
    cube-z:
      in: query
      name: z
      required: false
      description: |+
        Define the vertical levels to return data from 

        The value will override any vertical values defined in the BBOX query parameter 

        A range to return data for all levels between and including 2 defined levels

        i.e. z=minimum value/maximum value

        for instance if all values between and including 10m and 100m

        z=10/100

        A list of height values can be specified
        i.e. z=value1,value2,value3

        for instance if values at 2m, 10m and 80m are required

        z=2,10,80

        An Arithmetic sequence using Recurring height intervals, the difference is the number of recurrences is defined at the start 
        and the amount to increment the height by is defined at the end

        i.e. z=Rn/min height/height interval

        so if the request was for 20 height levels 50m apart starting at 100m:

        z=R20/100/50

        When not specified data from all available heights SHOULD be returned
      schema:
        type: string
        description: https://regex101.com/r/uSwgYh/1
        format: zRegex
    parameter-name:
      in: query
      name: parameter-name
      description: comma delimited list of parameters to retrieve data for.  Valid parameters are listed in the collections metadata
      required: false
      schema:
        type: string
        minLength: 1
      style: form
    within:
      in: query
      required: true
      name: within
      schema:
        type: string

        example: ['20', '0.5', '1000']
    within-units:
      name: within-units
      in: query
      required: true
      schema:
        type: string
        example: [miles, kilometers]
    resolution-x:
      name: resolution-x
      in: query
      schema:
        #type: string
        type: number
      description: >
        Defined it the user requires data at a different resolution from the native resolution of the data along the x-axis

        If this is a single value it denotes the number of intervals to retrieve data for along the x-axis

          i.e. resolution-x=10 

        would retrieve 10 values along the x-axis from the minimum x coordinate to maximum x coordinate (i.e. a value at both the minimum x and maximum x coordinates and 8 values between).
        NOTE: this has been altered to `type:number` instead of `type:string` so that exegesis does parameter validation for us
      required: false
    resolution-y:
      name: resolution-y
      in: query
      schema:
        type: string
      description: >
        Defined it the user requires data at a different resolution from the native resolution of the data along the y-axis

        If this is a single value it denotes the number of intervals to retrieve data for along the y-axis

          i.e. resolution-y=10 

        would retrieve 10 values along the y-axis from the minimum y coordinate to maximum y coordinate (i.e. a value at both the minimum y and maximum y coordinates and 8 values between)
        NOTE: this has been altered to `type:number` instead of `type:string` so that exegesis does parameter validation for us
      required: false
    resolution-z:
      name: resolution-z
      in: query
      schema:
        type: string
      description: >
        Defined it the user requires data at a different resolution from the native resolution of the data along the z-axis

        If this is a single value it denotes the number of intervals to retrieve data for along the z-axis

          i.e. resolution-z=10 

        would retrieve 10 values along the z-axis from the minimum z coordinate to maximum z  coordinate (i.e. a value at both the minimum z and maximum z coordinates and 8 values between).
        NOTE: this has been altered to `type:number` instead of `type:string` so that exegesis does parameter validation for us
      required: false
    corridor-width:
      name: corridor-width
      in: query
      required: true
      description: |+
        width of the corridor

        The width value represents the whole width of the corridor where
        the trajectory supplied in the `coords` query parameter is the centre
        point of the corridor

        `corridor-width={width}`

        e.g.  corridor-width=100

        Would be a request for a corridor 100 units wide with the coords parameter values being the centre point of the requested corridor, 
        the request would be for data values 50 units either side of the trajectory coordinates defined in the coords parameter. 

        The width units supported by the collection will be provided in the API metadata responses
      schema:
        type: string
    width-units:
      name: width-units
      in: query
      required: true
      description: Distance units for the corridor-width parameter
      schema:
        type: string
    corridor-height:
      name: corridor-height
      in: query
      required: true
      description: |+
        height of the corridor

        The height value represents the whole height of the corridor where
        the trajectory supplied in the `coords` query parameter is the centre
        point of the corridor

        `corridor-height={height}`

        e.g.  corridor-height=100

        Would be a request for a corridor 100 units high with the coords parameter values being the centre point of the requested corridor, 
        the request would be for data values 50 units either side of the trajectory coordinates defined in the coords parameter. 

        The height units supported by the collection will be provided in the API metadata responses
      schema:
        type: string
    height-units:
      name: height-units
      in: query
      description: Distance units for the corridor-height parameter
      required: true
      schema:
        type: string

    ################ Path Params
    instanceId:
      name: instanceId
      in: path
      description: Identifier (id) of a specific instance of a collection
      required: true
      schema:
        type: string
    itemId:
      in: path
      name: itemId
      required: true
      schema:
        type: string
    queryType:
      in: path
      name: queryType
      required: true
      schema:
        type: string
        enum: [position, trajectory, items, corridor, cube, radius]
    locationId:
      in: path
      name: locationId
      required: true
      schema:
        type: string
    collectionId:
      in: path
      name: collectionId
      required: true
      schema:
        type: string
    download:
      in: query
      name: download
      required: false
      schema:
        description: Allow a result to be download. Currently in testing, no filename customization to be done
        type: boolean
        default: true

  # Describing Common Responses
  responses:
    #Responses with coverageJSON, edrGeoJSON, text/yaml
    covJson_edrGeoJson_yaml:
      description: Ok.
      content:
        'application/prs.coverage+json':
          schema:
            $ref: '#/components/schemas/coverageJSON'
        application/geo+json:
          schema:
            $ref: '#/components/schemas/edrGeoJsonFeatureCollection'
        text/yaml:
          schema:
            type: string
    # Responses with only edrGeoJSON ~items & ~items/{itemId}
    geoJsonFeatureCollection:
      description: Ok.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/edrGeoJsonFeatureCollection'
        text/yaml:
          schema:
            type: string

    geoJsonFeature:
      description: Ok.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/edrGeoJsonFeature'
        text/yaml:
          schema:
            type: string
  requestBodies:
    corridor:
      content:
        application/json:
          schema:
            type: object
            required:
              - coords
              - corridor-width
              - width-units
              - corridor-height
              - height-units
            properties:
              download:
                type: boolean
                default: false
              coords:
                description: Well Known Text LineString definition
                type: string
              z:
                type: string
              datetime:
                type: string
              parameter-name:
                type: array
                items:
                  type: string
              corridor-width:
                type: string
              width-units:
                type: string
              corridor-height:
                type: string
              height-units:
                type: string
              resolution-x:
                type: string
              resolution-y:
                type: string
              crs:
                type: string
              f:
                type: string
    trajectory:
      content:
        application/json:
          schema:
            type: object
            required:
              - coords
            properties:
              download:
                type: boolean
                default: false
              coords:
                description: Well Known Text LineString definition
                type: string
              z:
                type: string
              datetime:
                type: string
              parameter-name:
                type: array
                items:
                  type: string
              crs:
                type: string
              f:
                type: string
    location:
      content:
        application/json:
          schema:
            type: object
            properties:
              download:
                type: boolean
                default: false
              datetime:
                type: string
              parameter-name:
                type: array
                items:
                  type: string
              crs:
                type: string
              f:
                type: string
    locations:
      content:
        application/json:
          schema:
            type: object
            properties:
              download:
                type: boolean
                default: false
              bbox:
                type: string
              datetime:
                type: string
    position:
      content:
        application/json:
          schema:
            type: object
            required:
              - coords
            properties:
              download:
                type: boolean
                default: false
              coords:
                description: Well Known Text Point definition
                type: string
              z:
                type: string
              datetime:
                type: string
              parameter-name:
                type: array
                items:
                  type: string
              crs:
                type: string
              f:
                type: string
    cube:
      content:
        application/json:
          schema:
            type: object
            required:
              - bbox
            properties:
              download:
                type: boolean
                default: false
              bbox:
                type: string
              z:
                type: string
              datetime:
                type: string
              parameter-name:
                type: array
                items:
                  type: string
              crs:
                type: string
              f:
                type: string
    area:
      content:
        application/json:
          schema:
            type: object
            required:
              - coords
            properties:
              download:
                type: boolean
                default: false
              coords:
                description: Well Known Text Polygon definition
                type: string
              z:
                type: string
              datetime:
                type: string
              parameter-name:
                type: array
                items:
                  type: string
              crs:
                type: string
              resolution-x:
                type: string
              resolution-y:
                type: string
              f:
                type: string
    radius:
      content:
        application/json:
          schema:
            type: object
            required:
              - coords
              - within
              - within-units
            properties:
              download:
                type: boolean
                default: false
              coords:
                description: Well Known Text Point definition
                type: string
              within:
                type: number
              within-units:
                type: string
              z:
                type: string
              datetime:
                type: string
              parameter-name:
                type: array
                items:
                  type: string
              crs:
                type: string
              f:
                type: string
